// Code generated by MockGen. DO NOT EDIT.
// Source: kitex_gen/user/srv/client.go
//
// Generated by this command:
//
//	mockgen -source=kitex_gen/user/srv/client.go -destination=internal/user/client_mock.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	user "github.com/cold-runner/Hylark/kitex_gen/user"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockClient) Certificate(ctx context.Context, req *user.CertificateRequest, callOptions ...callopt.Option) (*user.CertificateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Certificate", varargs...)
	ret0, _ := ret[0].(*user.CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certificate indicates an expected call of Certificate.
func (mr *MockClientMockRecorder) Certificate(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockClient)(nil).Certificate), varargs...)
}

// PasswordLogin mocks base method.
func (m *MockClient) PasswordLogin(ctx context.Context, req *user.PasswordLoginRequest, callOptions ...callopt.Option) (*user.PasswordLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PasswordLogin", varargs...)
	ret0, _ := ret[0].(*user.PasswordLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordLogin indicates an expected call of PasswordLogin.
func (mr *MockClientMockRecorder) PasswordLogin(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordLogin", reflect.TypeOf((*MockClient)(nil).PasswordLogin), varargs...)
}

// Register mocks base method.
func (m *MockClient) Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (*user.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*user.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockClientMockRecorder) Register(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClient)(nil).Register), varargs...)
}

// SendSmsCode mocks base method.
func (m *MockClient) SendSmsCode(ctx context.Context, req *user.SendSmsCodeRequest, callOptions ...callopt.Option) (*user.SendSmsCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendSmsCode", varargs...)
	ret0, _ := ret[0].(*user.SendSmsCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCode indicates an expected call of SendSmsCode.
func (mr *MockClientMockRecorder) SendSmsCode(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCode", reflect.TypeOf((*MockClient)(nil).SendSmsCode), varargs...)
}
