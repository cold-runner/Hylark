// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package post_srv

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	Category *category
	Post     *post
	PostLike *postLike
	PostTag  *postTag
	Tag      *tag
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Category = &Q.Category
	Post = &Q.Post
	PostLike = &Q.PostLike
	PostTag = &Q.PostTag
	Tag = &Q.Tag
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		Category: newCategory(db, opts...),
		Post:     newPost(db, opts...),
		PostLike: newPostLike(db, opts...),
		PostTag:  newPostTag(db, opts...),
		Tag:      newTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Category category
	Post     post
	PostLike postLike
	PostTag  postTag
	Tag      tag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Category: q.Category.clone(db),
		Post:     q.Post.clone(db),
		PostLike: q.PostLike.clone(db),
		PostTag:  q.PostTag.clone(db),
		Tag:      q.Tag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Category: q.Category.replaceDB(db),
		Post:     q.Post.replaceDB(db),
		PostLike: q.PostLike.replaceDB(db),
		PostTag:  q.PostTag.replaceDB(db),
		Tag:      q.Tag.replaceDB(db),
	}
}

type queryCtx struct {
	Category ICategoryDo
	Post     IPostDo
	PostLike IPostLikeDo
	PostTag  IPostTagDo
	Tag      ITagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category: q.Category.WithContext(ctx),
		Post:     q.Post.WithContext(ctx),
		PostLike: q.PostLike.WithContext(ctx),
		PostTag:  q.PostTag.WithContext(ctx),
		Tag:      q.Tag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
