// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package post

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CreatePostRequest struct {
	Token      *string  `thrift:"token,1,optional" frugal:"1,optional,string" json:"token,omitempty"`
	UserId     *string  `thrift:"user_id,2,optional" frugal:"2,optional,string" json:"user_id,omitempty"`
	CategoryId *string  `thrift:"category_id,3,optional" frugal:"3,optional,string" json:"category_id,omitempty"`
	Title      *string  `thrift:"title,4,optional" frugal:"4,optional,string" json:"title,omitempty"`
	Summary    *string  `thrift:"summary,5,optional" frugal:"5,optional,string" json:"summary,omitempty"`
	Content    *string  `thrift:"content,6,optional" frugal:"6,optional,string" json:"content,omitempty"`
	Picture    []byte   `thrift:"picture,7,optional" frugal:"7,optional,binary" json:"picture,omitempty"`
	LinkUrl    *string  `thrift:"link_url,8,optional" frugal:"8,optional,string" json:"link_url,omitempty"`
	TagId      []string `thrift:"tag_id,9,optional" frugal:"9,optional,set<string>" json:"tag_id,omitempty"`
}

func NewCreatePostRequest() *CreatePostRequest {
	return &CreatePostRequest{}
}

func (p *CreatePostRequest) InitDefault() {
	*p = CreatePostRequest{}
}

var CreatePostRequest_Token_DEFAULT string

func (p *CreatePostRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return CreatePostRequest_Token_DEFAULT
	}
	return *p.Token
}

var CreatePostRequest_UserId_DEFAULT string

func (p *CreatePostRequest) GetUserId() (v string) {
	if !p.IsSetUserId() {
		return CreatePostRequest_UserId_DEFAULT
	}
	return *p.UserId
}

var CreatePostRequest_CategoryId_DEFAULT string

func (p *CreatePostRequest) GetCategoryId() (v string) {
	if !p.IsSetCategoryId() {
		return CreatePostRequest_CategoryId_DEFAULT
	}
	return *p.CategoryId
}

var CreatePostRequest_Title_DEFAULT string

func (p *CreatePostRequest) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return CreatePostRequest_Title_DEFAULT
	}
	return *p.Title
}

var CreatePostRequest_Summary_DEFAULT string

func (p *CreatePostRequest) GetSummary() (v string) {
	if !p.IsSetSummary() {
		return CreatePostRequest_Summary_DEFAULT
	}
	return *p.Summary
}

var CreatePostRequest_Content_DEFAULT string

func (p *CreatePostRequest) GetContent() (v string) {
	if !p.IsSetContent() {
		return CreatePostRequest_Content_DEFAULT
	}
	return *p.Content
}

var CreatePostRequest_Picture_DEFAULT []byte

func (p *CreatePostRequest) GetPicture() (v []byte) {
	if !p.IsSetPicture() {
		return CreatePostRequest_Picture_DEFAULT
	}
	return p.Picture
}

var CreatePostRequest_LinkUrl_DEFAULT string

func (p *CreatePostRequest) GetLinkUrl() (v string) {
	if !p.IsSetLinkUrl() {
		return CreatePostRequest_LinkUrl_DEFAULT
	}
	return *p.LinkUrl
}

var CreatePostRequest_TagId_DEFAULT []string

func (p *CreatePostRequest) GetTagId() (v []string) {
	if !p.IsSetTagId() {
		return CreatePostRequest_TagId_DEFAULT
	}
	return p.TagId
}
func (p *CreatePostRequest) SetToken(val *string) {
	p.Token = val
}
func (p *CreatePostRequest) SetUserId(val *string) {
	p.UserId = val
}
func (p *CreatePostRequest) SetCategoryId(val *string) {
	p.CategoryId = val
}
func (p *CreatePostRequest) SetTitle(val *string) {
	p.Title = val
}
func (p *CreatePostRequest) SetSummary(val *string) {
	p.Summary = val
}
func (p *CreatePostRequest) SetContent(val *string) {
	p.Content = val
}
func (p *CreatePostRequest) SetPicture(val []byte) {
	p.Picture = val
}
func (p *CreatePostRequest) SetLinkUrl(val *string) {
	p.LinkUrl = val
}
func (p *CreatePostRequest) SetTagId(val []string) {
	p.TagId = val
}

var fieldIDToName_CreatePostRequest = map[int16]string{
	1: "token",
	2: "user_id",
	3: "category_id",
	4: "title",
	5: "summary",
	6: "content",
	7: "picture",
	8: "link_url",
	9: "tag_id",
}

func (p *CreatePostRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *CreatePostRequest) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *CreatePostRequest) IsSetCategoryId() bool {
	return p.CategoryId != nil
}

func (p *CreatePostRequest) IsSetTitle() bool {
	return p.Title != nil
}

func (p *CreatePostRequest) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *CreatePostRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *CreatePostRequest) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *CreatePostRequest) IsSetLinkUrl() bool {
	return p.LinkUrl != nil
}

func (p *CreatePostRequest) IsSetTagId() bool {
	return p.TagId != nil
}

func (p *CreatePostRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePostRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePostRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Token = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CategoryId = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Summary = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Picture = []byte(v)
	}
	return nil
}
func (p *CreatePostRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LinkUrl = &v
	}
	return nil
}
func (p *CreatePostRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.TagId = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.TagId = append(p.TagId, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreatePostRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePostRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePostRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePostRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreatePostRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategoryId() {
		if err = oprot.WriteFieldBegin("category_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CategoryId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreatePostRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err = oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Title); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreatePostRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummary() {
		if err = oprot.WriteFieldBegin("summary", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Summary); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreatePostRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreatePostRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Picture)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreatePostRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkUrl() {
		if err = oprot.WriteFieldBegin("link_url", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LinkUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreatePostRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagId() {
		if err = oprot.WriteFieldBegin("tag_id", thrift.SET, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.TagId)); err != nil {
			return err
		}
		for i := 0; i < len(p.TagId); i++ {
			for j := i + 1; j < len(p.TagId); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.TagId[i], p.TagId[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TagId[i]))
				}
			}
		}
		for _, v := range p.TagId {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreatePostRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePostRequest(%+v)", *p)

}

func (p *CreatePostRequest) DeepEqual(ano *CreatePostRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Title) {
		return false
	}
	if !p.Field5DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field6DeepEqual(ano.Content) {
		return false
	}
	if !p.Field7DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field8DeepEqual(ano.LinkUrl) {
		return false
	}
	if !p.Field9DeepEqual(ano.TagId) {
		return false
	}
	return true
}

func (p *CreatePostRequest) Field1DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field2DeepEqual(src *string) bool {

	if p.UserId == src {
		return true
	} else if p.UserId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field3DeepEqual(src *string) bool {

	if p.CategoryId == src {
		return true
	} else if p.CategoryId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CategoryId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field4DeepEqual(src *string) bool {

	if p.Title == src {
		return true
	} else if p.Title == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Title, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field5DeepEqual(src *string) bool {

	if p.Summary == src {
		return true
	} else if p.Summary == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Summary, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field6DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field7DeepEqual(src []byte) bool {

	if bytes.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field8DeepEqual(src *string) bool {

	if p.LinkUrl == src {
		return true
	} else if p.LinkUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LinkUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePostRequest) Field9DeepEqual(src []string) bool {

	if len(p.TagId) != len(src) {
		return false
	}
	for i, v := range p.TagId {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type CreatePostResponse struct {
}

func NewCreatePostResponse() *CreatePostResponse {
	return &CreatePostResponse{}
}

func (p *CreatePostResponse) InitDefault() {
	*p = CreatePostResponse{}
}

var fieldIDToName_CreatePostResponse = map[int16]string{}

func (p *CreatePostResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePostResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreatePostResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePostResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePostResponse(%+v)", *p)

}

func (p *CreatePostResponse) DeepEqual(ano *CreatePostResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}
