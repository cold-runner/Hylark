// Code generated by Kitex v0.8.0. DO NOT EDIT.

package srv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	post "github.com/cold-runner/Hylark/kitex_gen/post"
)

func serviceInfo() *kitex.ServiceInfo {
	return srvServiceInfo
}

var srvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "srv"
	handlerType := (*post.Srv)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreatePost": kitex.NewMethodInfo(createPostHandler, newSrvCreatePostArgs, newSrvCreatePostResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "post",
		"ServiceFilePath": `idl/postSrv.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.SrvCreatePostArgs)
	realResult := result.(*post.SrvCreatePostResult)
	success, err := handler.(post.Srv).CreatePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvCreatePostArgs() interface{} {
	return post.NewSrvCreatePostArgs()
}

func newSrvCreatePostResult() interface{} {
	return post.NewSrvCreatePostResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreatePost(ctx context.Context, req *post.CreatePostRequest) (r *post.CreatePostResponse, err error) {
	var _args post.SrvCreatePostArgs
	_args.Req = req
	var _result post.SrvCreatePostResult
	if err = p.c.Call(ctx, "CreatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
