// Code generated by Kitex v0.8.0. DO NOT EDIT.

package srv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "github.com/cold-runner/Hylark/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return srvServiceInfo
}

var srvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "srv"
	handlerType := (*user.Srv)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":       kitex.NewMethodInfo(registerHandler, newSrvRegisterArgs, newSrvRegisterResult, false),
		"SendSmsCode":    kitex.NewMethodInfo(sendSmsCodeHandler, newSrvSendSmsCodeArgs, newSrvSendSmsCodeResult, false),
		"PasswordLogin":  kitex.NewMethodInfo(passwordLoginHandler, newSrvPasswordLoginArgs, newSrvPasswordLoginResult, false),
		"Certificate":    kitex.NewMethodInfo(certificateHandler, newSrvCertificateArgs, newSrvCertificateResult, false),
		"UpdateUserInfo": kitex.NewMethodInfo(updateUserInfoHandler, newSrvUpdateUserInfoArgs, newSrvUpdateUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `idl/userSrv.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.SrvRegisterArgs)
	realResult := result.(*user.SrvRegisterResult)
	success, err := handler.(user.Srv).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvRegisterArgs() interface{} {
	return user.NewSrvRegisterArgs()
}

func newSrvRegisterResult() interface{} {
	return user.NewSrvRegisterResult()
}

func sendSmsCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.SrvSendSmsCodeArgs)
	realResult := result.(*user.SrvSendSmsCodeResult)
	success, err := handler.(user.Srv).SendSmsCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvSendSmsCodeArgs() interface{} {
	return user.NewSrvSendSmsCodeArgs()
}

func newSrvSendSmsCodeResult() interface{} {
	return user.NewSrvSendSmsCodeResult()
}

func passwordLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.SrvPasswordLoginArgs)
	realResult := result.(*user.SrvPasswordLoginResult)
	success, err := handler.(user.Srv).PasswordLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvPasswordLoginArgs() interface{} {
	return user.NewSrvPasswordLoginArgs()
}

func newSrvPasswordLoginResult() interface{} {
	return user.NewSrvPasswordLoginResult()
}

func certificateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.SrvCertificateArgs)
	realResult := result.(*user.SrvCertificateResult)
	success, err := handler.(user.Srv).Certificate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvCertificateArgs() interface{} {
	return user.NewSrvCertificateArgs()
}

func newSrvCertificateResult() interface{} {
	return user.NewSrvCertificateResult()
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.SrvUpdateUserInfoArgs)
	realResult := result.(*user.SrvUpdateUserInfoResult)
	success, err := handler.(user.Srv).UpdateUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSrvUpdateUserInfoArgs() interface{} {
	return user.NewSrvUpdateUserInfoArgs()
}

func newSrvUpdateUserInfoResult() interface{} {
	return user.NewSrvUpdateUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.SrvRegisterArgs
	_args.Req = req
	var _result user.SrvRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendSmsCode(ctx context.Context, req *user.SendSmsCodeRequest) (r *user.SendSmsCodeResponse, err error) {
	var _args user.SrvSendSmsCodeArgs
	_args.Req = req
	var _result user.SrvSendSmsCodeResult
	if err = p.c.Call(ctx, "SendSmsCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PasswordLogin(ctx context.Context, req *user.PasswordLoginRequest) (r *user.PasswordLoginResponse, err error) {
	var _args user.SrvPasswordLoginArgs
	_args.Req = req
	var _result user.SrvPasswordLoginResult
	if err = p.c.Call(ctx, "PasswordLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Certificate(ctx context.Context, req *user.CertificateRequest) (r *user.CertificateResponse, err error) {
	var _args user.SrvCertificateArgs
	_args.Req = req
	var _result user.SrvCertificateResult
	if err = p.c.Call(ctx, "Certificate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, req *user.UpdateUserInfoRequest) (r *user.UpdateUserInfoResponse, err error) {
	var _args user.SrvUpdateUserInfoArgs
	_args.Req = req
	var _result user.SrvUpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
